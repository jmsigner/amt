// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// diff_rcpp
NumericVector diff_rcpp(NumericVector xs);
RcppExport SEXP _amt_diff_rcpp(SEXP xsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type xs(xsSEXP);
    rcpp_result_gen = Rcpp::wrap(diff_rcpp(xs));
    return rcpp_result_gen;
END_RCPP
}
// within_rcpp
LogicalVector within_rcpp(NumericVector x, int a, int b);
RcppExport SEXP _amt_within_rcpp(SEXP xSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type a(aSEXP);
    Rcpp::traits::input_parameter< int >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(within_rcpp(x, a, b));
    return rcpp_result_gen;
END_RCPP
}
// random_steps_cpp_one_step
NumericMatrix random_steps_cpp_one_step(const int n_rand_steps, const double start_x, const double start_y, const double rel_angle, const NumericVector rand_sl, const NumericVector rand_ta);
RcppExport SEXP _amt_random_steps_cpp_one_step(SEXP n_rand_stepsSEXP, SEXP start_xSEXP, SEXP start_ySEXP, SEXP rel_angleSEXP, SEXP rand_slSEXP, SEXP rand_taSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type n_rand_steps(n_rand_stepsSEXP);
    Rcpp::traits::input_parameter< const double >::type start_x(start_xSEXP);
    Rcpp::traits::input_parameter< const double >::type start_y(start_ySEXP);
    Rcpp::traits::input_parameter< const double >::type rel_angle(rel_angleSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type rand_sl(rand_slSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type rand_ta(rand_taSEXP);
    rcpp_result_gen = Rcpp::wrap(random_steps_cpp_one_step(n_rand_steps, start_x, start_y, rel_angle, rand_sl, rand_ta));
    return rcpp_result_gen;
END_RCPP
}
// rolling_mean
NumericVector rolling_mean(NumericVector x, int win);
RcppExport SEXP _amt_rolling_mean(SEXP xSEXP, SEXP winSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type win(winSEXP);
    rcpp_result_gen = Rcpp::wrap(rolling_mean(x, win));
    return rcpp_result_gen;
END_RCPP
}
// rolling_median
NumericVector rolling_median(NumericVector x, int win);
RcppExport SEXP _amt_rolling_median(SEXP xSEXP, SEXP winSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type win(winSEXP);
    rcpp_result_gen = Rcpp::wrap(rolling_median(x, win));
    return rcpp_result_gen;
END_RCPP
}
// track_align_cpp
NumericVector track_align_cpp(IntegerVector t1, IntegerVector nt, int time_tol, int type);
RcppExport SEXP _amt_track_align_cpp(SEXP t1SEXP, SEXP ntSEXP, SEXP time_tolSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type t1(t1SEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type nt(ntSEXP);
    Rcpp::traits::input_parameter< int >::type time_tol(time_tolSEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(track_align_cpp(t1, nt, time_tol, type));
    return rcpp_result_gen;
END_RCPP
}
// mk_reg
NumericVector mk_reg(NumericVector t1, int time_dist, int time_tol, int start);
RcppExport SEXP _amt_mk_reg(SEXP t1SEXP, SEXP time_distSEXP, SEXP time_tolSEXP, SEXP startSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type t1(t1SEXP);
    Rcpp::traits::input_parameter< int >::type time_dist(time_distSEXP);
    Rcpp::traits::input_parameter< int >::type time_tol(time_tolSEXP);
    Rcpp::traits::input_parameter< int >::type start(startSEXP);
    rcpp_result_gen = Rcpp::wrap(mk_reg(t1, time_dist, time_tol, start));
    return rcpp_result_gen;
END_RCPP
}
// mk_reg_old
NumericVector mk_reg_old(NumericVector relocs_time, int time_dist, int time_tol, int start);
RcppExport SEXP _amt_mk_reg_old(SEXP relocs_timeSEXP, SEXP time_distSEXP, SEXP time_tolSEXP, SEXP startSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type relocs_time(relocs_timeSEXP);
    Rcpp::traits::input_parameter< int >::type time_dist(time_distSEXP);
    Rcpp::traits::input_parameter< int >::type time_tol(time_tolSEXP);
    Rcpp::traits::input_parameter< int >::type start(startSEXP);
    rcpp_result_gen = Rcpp::wrap(mk_reg_old(relocs_time, time_dist, time_tol, start));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_amt_diff_rcpp", (DL_FUNC) &_amt_diff_rcpp, 1},
    {"_amt_within_rcpp", (DL_FUNC) &_amt_within_rcpp, 3},
    {"_amt_random_steps_cpp_one_step", (DL_FUNC) &_amt_random_steps_cpp_one_step, 6},
    {"_amt_rolling_mean", (DL_FUNC) &_amt_rolling_mean, 2},
    {"_amt_rolling_median", (DL_FUNC) &_amt_rolling_median, 2},
    {"_amt_track_align_cpp", (DL_FUNC) &_amt_track_align_cpp, 4},
    {"_amt_mk_reg", (DL_FUNC) &_amt_mk_reg, 4},
    {"_amt_mk_reg_old", (DL_FUNC) &_amt_mk_reg_old, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_amt(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
